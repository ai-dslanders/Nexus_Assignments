# -*- coding: utf-8 -*-
"""Copy of Assignment 06. Descriptive Stats | Nexus | RezaShokrzad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tu1UYX3Ky4UWDUSYgneKM8om-y2oUrdy

# 📚 Assignment 06 — Descriptive Statistics


<p align="center">📢⚠️📂  </p>

<p align="center"> Please name your file using the format: <code>assignmentName_nickname.py/.ipynb</code> (e.g., <code>project1_ali.py</code>) and push it to GitHub with a clear commit message.</p>

<p align="center"> 🚨📝🧠 </p>

------------------------------------------------



## 📘 Exploring Descriptive Statistics with NumPy & SciPy
This assignment guides you through generating random data, analyzing its statistical properties, and visualizing it using plots.
"""

# 📦 Import Required Libraries
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# 🎲 Step 1: Generate Random Integer List
np.random.seed(42)  # For reproducibility
data = np.random.randint(20, 40, size=30)
print("Generated Data:", data)

"""### 📊 Step 2: Central Tendency and Quantiles
Let's compute basic statistics — mean, median, mode, and quantiles.
"""

# 📐 Central Tendency
# mean
mean_val = np.mean(data)
# median
median_val = np.median(data)
# mode
mode_val = stats.mode(data, keepdims=True).mode[0]

# 📏 Quantiles
q1 = np.quantile(data, 0.25)
q3 = np.quantile(data, 0.75)

print(f"Mean: {mean_val}")
print(f"Median: {median_val}")
print(f"Mode: {mode_val}")
print(f"Q1 (25%): {q1}")
print(f"Q3 (75%): {q3}")

"""### 🧪 Step 3: Skewness and Kurtosis
Skewness shows asymmetry, and kurtosis indicates the "tailedness" of the distribution.
"""

# 📉 Skewness and Kurtosis
skew_val = stats.skew(data)
kurtosis_val = stats.kurtosis(data)

print(f"Skewness: {skew_val:.2f}")
print(f"Kurtosis: {kurtosis_val:.2f}")

"""### 📈 Step 4: Visualization - Bar Chart and Boxplot
Visualize the data to better understand its distribution and spread.
"""

# 📊 Bar Plot
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
# make a bar chart
plt.bar(range(len(data)), data)
plt.title("Bar Plot of Random Data")
plt.xlabel("Index")
plt.ylabel("Value")

# 📦 Boxplot
plt.subplot(1, 2, 2)
# make a box plot
plt.boxplot(data, vert=False)
plt.title("Boxplot of Random Data")
plt.xlabel("Value")

plt.tight_layout()
plt.show()