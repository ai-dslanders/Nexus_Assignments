# -*- coding: utf-8 -*-
"""Copy of AI–DS Nexus | A0.1. Python | RezaShokr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/171bGtGHgn3Z611k30wA6TTPwyEMLbDIM

# 📚 Assignment 1 — Python Fundamentals
Welcome to your first hands-on practice! This set of four mini-projects walks you through the basics every Python (and ML) developer leans on daily:

1. Variable types

2. Core containers

3. Functions

4. Classes

Each part begins with quick pointers, then gives you two bite-sized tasks to code. Replace every # TODO with working Python and run your script or notebook to check the result. Happy hacking! 😊

## 1. Variable Types 🧮
**Quick-start notes**

* Primitive types: `int`, `float`, `str`, `bool`

* Use `type(obj)` to inspect an object’s type.

* Casting ↔ converting: `int("3")`, `str(3.14)`, `bool(0)`, etc.

### Task 1 — Celsius → Fahrenheit
"""

# 👉 a Celsius temperature (as text), convert it to float,
#    compute Fahrenheit (°F = °C * 9/5 + 32) and print a nicely formatted line.
Celsius_temp = input('Enter your tempetature in Celsius:')
Celsius = float(Celsius_temp)
farenheit = (Celsius * 9/5 + 32)
print(f'{Celsius}°C is equal to {farenheit}°F')

"""### Task 2 — Tiny Calculator

"""

# 👉 Store two numbers of **different types** (one int, one float),
#    then print their sum, difference, product, true division, and floor division.
num1 = 21
num2 = 3.5
sum_result = num1 + num2
difference = num1 - num2
product = num1 * num2
true_division = num1 / num2
floor_division = num1 // num2
print(f'{sum_result}')
print(f'{difference}')
print(f'{product}')
print(f'{true_division}')
print(f'{floor_division}')

"""## 2. Containers 📦 (list, tuple, set, dict)
**Quick-start notes**

| Container | Mutable? | Ordered?                      | Typical use                       |
| --------- | -------- | ----------------------------- | --------------------------------- |
| `list`    | ✔        | ✔                             | Growth, indexing, slicing         |
| `tuple`   | ✖        | ✔                             | Fixed-size records, hashable keys |
| `set`     | ✔        | ✖                             | Deduplication, membership tests   |
| `dict`    | ✔        | ✖ (3.7 + preserves insertion) | Key → value look-ups              |

### Task 1 — Grocery Basket
"""

# Start with an empty shopping list (list).
# 1. Append at least 4 items supplied in one line of user input (comma-separated).
# 2. Convert the list to a *tuple* called immutable_basket.
# 3. Print the third item using tuple indexing.
# TODO: your code here
user_input = input("Enter at least 4 items for your shopping list: ")
shopping_list = [item.strip() for item in user_input.split(",")]
immutable_basket = tuple(shopping_list)
print(immutable_basket[2])

"""### Task 2 — Word Stats"""

sample = "to be or not to be that is the question"

# 1. Build a set `unique_words` containing every distinct word.
# 2. Build a dict `word_counts` mapping each word to the number of times it appears.
#    (Hint: .split() + a simple loop)
# 3. Print the two structures and explain (in a comment) their main difference.
# TODO: your code here
text = input("Enter a sentence or paragraph: ")
words = text.split()
unique_words = set(words)
word_counts = {}
for word in words:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1
print("Unique words (set):", unique_words)
print("Word counts (dict):", word_counts)
# تفاوت اصلی:
# set فقط هر کلمه را یک‌بار نگه می‌دارد و ترتیب ندارد.
# dict هر کلمه را همراه با تعداد تکرار آن نگه می‌دارد و اطلاعات بیشتری فراهم می‌کند.

"""## 3. Functions 🔧
**Quick-start notes**

* Define with `def`, return with `return`.

* Parameters can have default values.

* Docstrings (`''' … '''`) document behaviour.

### Task 1 — Prime Tester
"""

def is_prime(n: int) -> bool:
    """
    Return True if n is a prime number, else False.
    0 and 1 are *not* prime.
    """
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True


# Quick self-check
print([x for x in range(10) if is_prime(x)])   # Expected: [2, 3, 5, 7]

"""### Task 2 — Repeater Greeter"""

def greet(name: str, times: int = 1) -> None:
    """Print `name`, capitalised, exactly `times` times on one line."""
    capitalised_name = name.capitalize()
    print((capitalised_name + ' ') * times)


greet("alice")          # Alice
greet("bob", times=3)   # Bob Bob Bob

"""## 4. Classes 🏗️
**Quick-start notes**

* Create with class Name:

* Special method __init__ runs on construction.

* self refers to the instance; attributes live on self.

### Task 1 — Simple Counter
"""

class Counter:
    """Counts how many times `increment` is called."""
    def __init__(self):
        """Initialize the counter with 0."""
        self._count = 0

    def increment(self, step: int = 1) -> None:
        """Increment the counter by `step` (default is 1)."""
        self._count += step

    def value(self) -> int:
        """Return the current count."""
        return self._count


c = Counter()
for _ in range(5):
    c.increment()
print(c.value())   # Expected: 5

"""### Task 2 — 2-D Point with Distance"""

import math

class Point:
    """
    A 2-D point supporting distance calculation.
    Usage:
        p = Point(3, 4)
        q = Point(0, 0)
        print(p.distance_to(q))  # 5.0
    """
    def __init__(self, x: float, y: float):
        """Initialize the point with x and y coordinates."""
        self.x = x
        self.y = y

    def distance_to(self, other: 'Point') -> float:
        """
        Calculate Euclidean distance to another point.
        Formula: sqrt((x2 - x1)^2 + (y2 - y1)^2)
        """
        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
p = Point(3, 4)
q = Point(0, 0)
print(p.distance_to(q))

# Smoke test
p, q = Point(3, 4), Point(0, 0)
assert round(p.distance_to(q), 1) == 5.0