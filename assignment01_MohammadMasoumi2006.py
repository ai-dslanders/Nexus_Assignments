# -*- coding: utf-8 -*-
"""Assignment 01. Python | Nexus | RezaShokrzad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PHW5WZ1eMJVDuFL2QTtMEkdiZAaF4xQL

# 📚 Assignment 1 — Python Fundamentals

<p align="center">📢⚠️📂  </p>

<p align="center"> Please name your file using the format: <code>assignmentName_nickname.py/.ipynb</code> (e.g., <code>project1_ali.py</code>) and push it to GitHub with a clear commit message.</p>

<p align="center"> 🚨📝🧠 </p>

------------------------------------------------
Welcome to your first hands-on practice! This set of four mini-projects walks you through the basics every Python (and ML) developer leans on daily:

1. Variable types

2. Core containers

3. Functions

4. Classes

Each part begins with quick pointers, then gives you two bite-sized tasks to code. Replace every # TODO with working Python and run your script or notebook to check the result. Happy hacking! 😊

## 1. Variable Types 🧮
**Quick-start notes**

* Primitive types: `int`, `float`, `str`, `bool`

* Use `type(obj)` to inspect an object’s type.

* Casting ↔ converting: `int("3")`, `str(3.14)`, `bool(0)`, etc.

### Task 1 — Celsius → Fahrenheit
"""

# 👉 a Celsius temperature (as text), convert it to float,
#    compute Fahrenheit (°F = °C * 9/5 + 32) and print a nicely formatted line.
celsiue_str = "27"
celsius = float(celsiue_str)
fahrenhite = celsius * 9 / 5 +32

print (f"{celsius} is equal to {fahrenhite}")

"""### Task 2 — Tiny Calculator

"""

# 👉 Store two numbers of **different types** (one int, one float),
#    then print their sum, difference, product, true division, and floor division.
num1 = 12
num2 = 3.14
print("sum :", num1 + num2)
print("diffenece: ", num1 - num2)
print("multiplication :", num1 * num2)
print("rue Division: " , num1 / num2)
print("loor Division: " ,num1 // num2)

"""## 2. Containers 📦 (list, tuple, set, dict)
**Quick-start notes**

| Container | Mutable? | Ordered?                      | Typical use                       |
| --------- | -------- | ----------------------------- | --------------------------------- |
| `list`    | ✔        | ✔                             | Growth, indexing, slicing         |
| `tuple`   | ✖        | ✔                             | Fixed-size records, hashable keys |
| `set`     | ✔        | ✖                             | Deduplication, membership tests   |
| `dict`    | ✔        | ✖ (3.7 + preserves insertion) | Key → value look-ups              |

### Task 1 — Grocery Basket
"""

# Start with an empty shopping list (list).
# 1. Append at least 4 items supplied in one line of user input (comma-separated).
# 2. Convert the list to a *tuple* called immutable_basket.
# 3. Print the third item using tuple indexing.
buy_list = []
buy_list.extend(["apple","banana","watermelon","orange"])
immutable_basket = tuple(buy_list)
print(immutable_basket[2])

"""### Task 2 — Word Stats"""

sample = "to be or not to be that is the question"

# 1. Build a set `unique_words` containing every distinct word.
# 2. Build a dict `word_counts` mapping each word to the number of times it appears.
#    (Hint: .split() + a simple loop)
# 3. Print the two structures and explain (in a comment) their main difference.
sample = "to be or not to be that is the question"

# جدا کردن کلمات
words = sample.split()

# ساختن مجموعه کلمات یکتا
unique_words = set(words)

# ساختن دیکشنری شمارش کلمات
word_counts = {}
for word in words:
    word_counts[word] = word_counts.get(word, 0) + 1

# چاپ خروجی‌ها
print("Unique words:", unique_words)
print("Word counts:", word_counts)

# تفاوت اصلی:
# مجموعه فقط کلمات یکتا دارد.
# دیکشنری تعداد تکرار هر کلمه را نشان می‌دهد.

"""## 3. Functions 🔧
**Quick-start notes**

* Define with `def`, return with `return`.

* Parameters can have default values.

* Docstrings (`''' … '''`) document behaviour.

### Task 1 — Prime Tester
"""

def is_prime(n: int) -> bool:
    """
    Return True if n is a prime number, else False.
    0 and 1 are *not* prime.
    """
    if n < 2:
        return False

    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False

    return True

print([x for x in range(10) if is_prime(x)])   # Expected: [2, 3, 5, 7]

"""### Task 2 — Repeater Greeter"""

def greet(name: str, times: int = 1) -> None:
    """Print `name`, capitalised, exactly `times` times on one line."""

    capitalized_name = name.capitalize()


    repeated_names = [capitalized_name] * times


    print(" ".join(repeated_names))

# تست تابع
greet("alice")          # خروجی: Alice
greet("bob", times=3)   # خروجی: Bob Bob Bob

"""## 4. Classes 🏗️
**Quick-start notes**

* Create with class Name:

* Special method __init__ runs on construction.

* self refers to the instance; attributes live on self.

### Task 1 — Simple Counter
"""

class Counter:
    """Counts how many times `increment` is called."""

    def __init__(self):
        self.count = 0

    def increment(self, step: int = 1):
        self.count += step

    def value(self):
        return self.count



c = Counter()
for _ in range(5):
    c.increment()
print(c.value())   # Expected: 5

"""### Task 2 — 2-D Point with Distance"""

import math

class Point:
    """
    A 2-D point supporting distance calculation.
    Usage:
        p = Point(3, 4)
        q = Point(0, 0)
        print(p.distance_to(q))  # 5.0
    """
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def distance_to(self, other):
        dx = self.x - other.x
        dy = self.y - other.y
        return math.sqrt(dx ** 2 + dy ** 2)

# Smoke test
p, q = Point(3, 4), Point(0, 0)
assert round(p.distance_to(q), 1) == 5.0
print("Distance:", p.distance_to(q))  # Optional print to see result